1，
	如果有两个或多个任务(进程/线程，并发的实体)，同时访问同一个“共享资源”
	，我们必须要保证这个共享资源的有序访问，否则就会产生不可预知的后果。
	
	分析：
		并发 -》 竞争 -》 共享资源的非法访问 -》 程序结果异常 。。。。
		
	解决：
		不要并发？？？ 可以解决，但是不好，会降低CPU的效率
		
		在保留并发的前提下，“避免竞争”
		-》访问共享资源的时候，严格的串行
		
		
2，信号量机制
	信号量是为了保护共享资源，让共享资源有序访问的一种机制
	信号量是程序界最高尚的一种存在
	因为他不是为了自己而存在的，是为了别人(它要保护的那个共享资源)而存在
		保镖
	什么时候需要信号量？？？
		有被保护的对象时才需要信号量
		首先要搞清楚，谁需要保护？？？？
		
3，如何保护？？？
	“保护”是指：让这个被保护的对象 有序访问，避免竞争
	被保护的对象：必定是一个共享资源（多个进程/线程 都要访问的资源）
	
	信号量机制其实是程序员之间的一种约定，用来保护共享资源的
	比如说 进程A和进程B，都要访问一个 “互斥设备”，那么我们可以用一个信号量
	来表示能不能访问该设备，然后每个进程访问该设备前，先去访问信号量，
	如果信号量表示能访问该设备，马上把信号量设置为不能访问的状态，这个时候
	就可以高枕无忧的访问该设备，访问完设备之后，马上把信号量设置为能访问的
	状态
	
	
	在访问共享资源之前，先访问信号量， 判断共享资源是否能被访问
		能访问：
			你就获取该信号量（变为“不能访问”），再进入下面的代码
		不能访问：
			等待，直到信号量变为“能访问”
			
		.......
		访问共享资源的代码		-》临界区
		.......
		
	在访问共享资源之后，要释放信号量（变为“能访问”）
	
4，信号量是如何实现的
	信号量其实就是大家都能访问的 一个整数
	一个进程或线程可以在某个信号量上执行如下三种操作
	(1)创建一个信号量
		需要指定信号量的初始值。
		初始值表示该信号量保护的共享资源，可以同时被多少个进程/线程同时
		访问
		sem -> 1	表示只有一个进程/线程可以同时访问它所保护的资源
			此时这个资源称之为“互斥资源”，这个信号量称之为“互斥信号量”
		
		sem -> 3	表示最多允许3个进程/线程同时访问它所保护的资源
		
	(2)等待一个信号量
		该操作会测试这个信号量的值，如果其值 <=0 ，那么说明还不能访问，
		就等待/阻塞，一旦其值 >0 ，马上将它-1，并继续往下执行临界区代码
		（访问共享资源），执行完了，就需要进行第3个操作
		P操作	proberen 荷兰语
		down操作
		lock操作

	(3)释放一个信号量
		该操作将信号量的值 +1 
		
		V操作 verhogen(增加) 荷兰语
		up
		unlock
		
	信号量保护共享资源是通过
		在临界区之前加一个 P操作
		在临界区之后加一个 V操作
		来实现的

		P操作和V操作是原子操作，不会被打断
		
	信号量机制有两套常用的标准
	system V 和 posix
		
5，POSIX 信号量	
	分为无名信号量和有名信号量
	
	有名信号量：在文件系统中有个名字，值存在内核
		-》用于任意进程间的同步 ，线程间同步
		
	无名信号量：
		没有名字，存在内存中的
		如果这段内存属于内核地址空间 如：共享内存，进程可以访问，线程也
		可以访问。
		
		既可以用于进程间的同步，也可以用于线程间的同步
		如果说这段内存属于进程地址空间
			就不能用于进程间的同步，只能用于同一个进程中线程间同步
		
		
	(1)创建一个信号量
		posix信号量用类型 sem_t 来表示，不管是有名信号量还是无名信号量
		，都是用sem_t来表示
		
		无名信号量：
			sem_t * psem = malloc(sizeof(sem_t));
			
			
		有名信号量：
		sem_open ：用于创建或打开一个有名信号量
		#include <fcntl.h>           /* For O_* constants */
       #include <sys/stat.h>        /* For mode constants */
       #include <semaphore.h>

       sem_t *sem_open(const char *name, int oflag);
       sem_t *sem_open(const char *name, int oflag,
                       mode_t mode, unsigned int value);
				name：要创建或打开的posix有名信号量在文件系统中的路径名
					必须要在根目录下
						如： "/test.sem"
				oflag:
					(1) 打开: 0
					(2) 创建: O_CREAT
				如果只是打开信号量，而不是创建新的信号量，就不需要第三，第四个参数了	
				mode:创建的权限位
					(1) 宏
					(2) 八进制 如 0664
		
				value :指定创建的有名信号量的初始值
			返回值：
				成功返回一个 sem_t 指针，指向有名信号量
				失败返回NULL,同时errno被设置
		
		Link with -pthread.
			-l pthread
		

	(2)POSIX信号量 p操作
		sem_wait
		SYNOPSIS
       #include <semaphore.h>

			"死等" 如果没有获取到信号，就一直等
       int sem_wait(sem_t *sem);

			"试一试" 能获取则获取，不能获取直接返回-1
       int sem_trywait(sem_t *sem);

			"限时等待" 设置一个等待时间，时间内就等待，超过时间，不管是否
					获取，都往下执行
       int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);

       Link with -pthread.
	   
			sem:信号量的指针
			abs_timeout：等待的超时的绝对时间
				“绝对时间” = 当前时间 + 相对时间
		
			struct timespec {
               time_t tv_sec;      /* Seconds */
               long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */
            };
			
			获取当前时间的函数：
			clock_gettime
			int clock_gettime(clockid_t clk_id, struct timespec *tp);
				struct timespec time;
				clock_gettime(CLOCK_REALTIME,&time);
		
		绝对时间 例子
			struct timespec time;
			clock_gettime(CLOCK_REALTIME,&time);
			//等待时间为 2s 零 1000ns
			time.tv_sec += 2;
			time.tv_nsec += 1000;
			if(time.tv_nsec >= 1000000000)
			{
				time.tv_sec += 1;
				time.tv_nsec -= 1000000000;
			}
			
			
	(3)POSIX信号量 V操作
		sem_post 
		sem_post - unlock a semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_post(sem_t *sem);

       Link with -pthread.

		
		
		
		
		




